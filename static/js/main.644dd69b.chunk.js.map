{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["convertDecimal","value","length","Math","pow","App","useState","widthUnitPerPattern","setWidthUnitPerPattern","heightUnitPerPattern","setHeightUnitPerPattern","totalWidthPatternCount","setTotalWidthPatternCount","totalHeightPatternCount","setTotalHeightPatternCount","totalWidthPatternLength","setTotalWidthPatternLength","totalWidthPatternLengthDecimal","setTotalWidthPatternLengthDecimal","totalHeightPatternLength","setTotalHeightPatternLength","totalHeightPatternLengthDecimal","setTotalHeightPatternLengthDecimal","isCalculation","setIsCalculation","needWidthSize","setNeedWidthSize","needHeightSize","setNeedHeightSize","className","style","background","width","height","onChange","e","Number","parseInt","target","isNaN","display","justifyContent","alignItems","cursor","fontSize","onClick","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.644dd69b.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nimport './App.css';\n\nfunction convertDecimal(value : any) {\n\n    let length = (value + \"\").length;\n    let unit = Math.pow(0.1, length)\n\n    return unit * value;\n}\n\nfunction App() {\n\n    // 가로 1무늬 코\n    const [widthUnitPerPattern, setWidthUnitPerPattern] = useState(0);\n    // const [widthUnitPerPatternDecimal, setWidthUnitPerPatternDecimal] = useState(0);\n    // 세로 1무늬 단\n    const [heightUnitPerPattern, setHeightUnitPerPattern] = useState(0);\n    // const [heightUnitPerPatternDecimal, setHeightUnitPerPatternDecimal] = useState(0);\n\n    // 총 가로 무늬 갯수\n    const [totalWidthPatternCount, setTotalWidthPatternCount] = useState(0);\n    // const [totalWidthPatternCountDecimal, setTotalWidthPatternCountDecimal] = useState(0);\n    // 총 가로 무늬 길이\n    const [totalHeightPatternCount, setTotalHeightPatternCount] = useState(0);\n    // const [totalHeightPatternCountDecimal, setTotalHeightPatternCountDecimal] = useState(0);\n\n    // 총 세로 무늬 갯수\n    const [totalWidthPatternLength, setTotalWidthPatternLength] = useState(0);\n    const [totalWidthPatternLengthDecimal, setTotalWidthPatternLengthDecimal] = useState(0);\n    // 총 세로 무늬 길이\n    const [totalHeightPatternLength, setTotalHeightPatternLength] = useState(0);\n    const [totalHeightPatternLengthDecimal, setTotalHeightPatternLengthDecimal] = useState(0);\n\n    const [isCalculation, setIsCalculation] = useState(true);\n\n    const [needWidthSize, setNeedWidthSize] = useState(0);\n    const [needHeightSize, setNeedHeightSize] = useState(0);\n\n    return (\n        <div className=\"App\" style={{\n            background: \"#ffff00\",\n            width: \"100vw\",\n            height: \"100vh\"\n        }}>\n\n            {\n                isCalculation &&\n                <div>\n                    <h1>기본 무늬</h1>\n                    <span>가로 1무늬</span>\n                    <input value={widthUnitPerPattern} onChange={(e) => {\n                        try {\n                            var value = Number.parseInt(e.target.value);\n                            if (!Number.isNaN(value)) setWidthUnitPerPattern(value);\n                            else setWidthUnitPerPattern(0)\n                        } catch (e) {\n                            setWidthUnitPerPattern(0);\n                        }\n                    }\n                    }/>코\n                    <br/>\n                    <span>세로 1무늬</span>\n                    <input value={heightUnitPerPattern} onChange={(e) => {\n                        try {\n                            var value = Number.parseInt(e.target.value);\n                            if (!Number.isNaN(value)) setHeightUnitPerPattern(value);\n                            else setHeightUnitPerPattern(0)\n                        } catch (e) {\n                            setHeightUnitPerPattern(0);\n                        }\n\n                    }\n                    }/>단\n\n                    <br/>\n                    <h1>치수 입력</h1>\n                    <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                        <div>\n                            <span>가로</span>\n                        </div>\n                        <div>\n                            <input value={totalWidthPatternCount} onChange={(e) => {\n                                try {\n                                    var value = Number.parseInt(e.target.value);\n                                    if (!Number.isNaN(value)) setTotalWidthPatternCount(value);\n                                    else setTotalWidthPatternCount(0)\n                                } catch (e) {\n                                    setTotalWidthPatternCount(0);\n                                }\n\n                            }\n                            }/>무늬\n                            <br/>\n                            <input value={totalWidthPatternLength} onChange={(e) => {\n                                try {\n                                    var value = Number.parseInt(e.target.value);\n                                    if (!Number.isNaN(value)) setTotalWidthPatternLength(value);\n                                    else setTotalWidthPatternLength(0)\n                                } catch (e) {\n                                    setTotalWidthPatternLength(0);\n                                }\n\n                            }\n                            }/>\n                            &nbsp;.&nbsp;\n                            <input value={totalWidthPatternLengthDecimal} onChange={(e) => {\n                                try {\n                                    var value = Number.parseInt(e.target.value);\n                                    if (!Number.isNaN(value)) setTotalWidthPatternLengthDecimal(value);\n                                    else setTotalWidthPatternLengthDecimal(0)\n                                } catch (e) {\n                                    setTotalWidthPatternLengthDecimal(0);\n                                }\n\n                            }\n                            }/>cm\n                            <br/>\n                        </div>\n                    </div>\n\n                    <br/><br/>\n\n                    <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                        <div>\n                            <span>세로</span>\n                        </div>\n                        <div>\n                            <input value={totalHeightPatternCount} onChange={(e) => {\n                                try {\n                                    var value = Number.parseInt(e.target.value);\n                                    if (!Number.isNaN(value)) setTotalHeightPatternCount(value);\n                                    else setTotalHeightPatternCount(0)\n                                } catch (e) {\n                                    setTotalHeightPatternCount(0);\n                                }\n\n                            }\n                            }/>무늬\n                            <br/>\n                            <input value={totalHeightPatternLength} onChange={(e) => {\n                                try {\n                                    var value = Number.parseInt(e.target.value);\n                                    if (!Number.isNaN(value)) setTotalHeightPatternLength(value);\n                                    else setTotalHeightPatternLength(0)\n                                } catch (e) {\n                                    setTotalHeightPatternLength(0);\n                                }\n\n                            }\n                            }/>\n                            &nbsp;.&nbsp;\n                            <input value={totalHeightPatternLengthDecimal} onChange={(e) => {\n                                try {\n                                    var value = Number.parseInt(e.target.value);\n                                    if (!Number.isNaN(value)) setTotalHeightPatternLengthDecimal(value);\n                                    else setTotalHeightPatternLengthDecimal(0)\n                                } catch (e) {\n                                    setTotalHeightPatternLengthDecimal(0);\n                                }\n\n                            }\n                            }/>cm\n                            <br/>\n                        </div>\n                    </div>\n\n                    <div\n                        style={{\n                            cursor: \"pointer\",\n                            background: \"#ff0000\",\n                            width: \"300px\",\n                            height: \"100px\",\n                            fontSize: \"30px\"\n                        }}\n                        onClick={(e) => {\n                            setIsCalculation(!isCalculation)\n                        }}> 계산하기\n                    </div>\n\n                </div>\n            }\n\n            {\n                !isCalculation && <div>\n                    <h1>게이지</h1>\n                    <h2>10cm2</h2>\n                    <span>가로 1무늬</span>\n                    <span style={{\n                        color: \"#ff0000\",\n                        fontSize: \"20px\"\n                    }}>{(((widthUnitPerPattern) * totalWidthPatternCount * 10) / (totalWidthPatternLength + convertDecimal(totalWidthPatternLengthDecimal) ))}</span>\n                    <span>코</span>\n                    <br/>\n                    <span>세로 1무늬</span>\n                    <span style={{\n                        color: \"#ff0000\",\n                        fontSize: \"20px\"\n                    }}>{((heightUnitPerPattern) * totalHeightPatternCount * 10) / (totalHeightPatternLength + convertDecimal(totalHeightPatternLengthDecimal) )}</span>\n                    <span>단</span>\n                    <br/>\n\n                    <h2>한무늬</h2>\n                    <span>가로 1무늬</span>\n                    <span style={{\n                        color: \"#ff0000\",\n                        fontSize: \"20px\"\n                    }}>{(totalWidthPatternLength + convertDecimal(totalWidthPatternLengthDecimal)) / totalWidthPatternCount}</span>\n                    <span>코</span>\n                    <br/>\n                    <span>세로 1무늬</span>\n                    <span style={{\n                        color: \"#ff0000\",\n                        fontSize: \"20px\"\n                    }}>{(totalHeightPatternLength + convertDecimal(totalHeightPatternLengthDecimal)) / totalHeightPatternCount}</span>\n                    <span>단</span>\n                    <br/>\n\n                    <h2>코당 cm, 단당 cm</h2>\n                    <span>코당 길이 (cm)</span>\n                    <input value={needWidthSize} onChange={(e) => {\n                        try {\n                            var value = Number.parseInt(e.target.value);\n                            if (!Number.isNaN(value)) setNeedWidthSize(value);\n                            else setNeedWidthSize(0)\n                        } catch (e) {\n                            setNeedWidthSize(0);\n                        }\n\n                    }\n                    }/> 코\n                    <div style={{fontSize: \"20px\", color : \"#ff0000\"}}>\n                        {needWidthSize / (((widthUnitPerPattern) * totalWidthPatternCount) / (totalWidthPatternLength + convertDecimal(totalWidthPatternLengthDecimal) ))}\n                    </div> cm\n\n                <br/>\n                    <span>단당 길이 (cm)</span>\n                    <input value={needHeightSize} onChange={(e) => {\n                        try {\n                            var value = Number.parseInt(e.target.value);\n                            if (!Number.isNaN(value)) setNeedHeightSize(value);\n                            else setNeedHeightSize(0)\n                        } catch (e) {\n                            setNeedHeightSize(0);\n                        }\n\n                    }\n                    }/> 코\n                    <div style={{fontSize: \"20px\", color : \"#ff0000\"}}>\n                        {needHeightSize / (((heightUnitPerPattern) * totalHeightPatternCount) / (totalHeightPatternLength + convertDecimal(totalHeightPatternLengthDecimal) ))}\n                    </div> cm\n\n\n                    <div\n                        style={{\n                            cursor: \"pointer\",\n                            background: \"#ff0000\",\n                            width: \"300px\",\n                            height: \"100px\",\n                            fontSize: \"30px\"\n                        }}\n                        onClick={(e) => {\n                            setIsCalculation(!isCalculation)\n                        }}> 돌아가기\n                    </div>\n                </div>\n\n\n            }\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}